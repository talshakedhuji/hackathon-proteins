# This is a sample Python script.

# Press ⌃R to execute it or replace it with your code. dvD
# Press Double ⇧ to search everywhere for classes, files, tool windows, actions, and settings.
import sys

import tensorflow as tf
from tensorflow.keras import layers
import pickle
import numpy as np
import matplotlib.pyplot as plt
import HackatonUtils as utils
import seq_mutation
import argparse
import matplotlib
from Bio.PDB import Polypeptide
import subprocess
HEADER = "HEADER    IMMUNE SYSTEM - NANOBODY                           \nTITLE     COMPUTATIONAL MODELING     \nREMARK 777 MODEL GENERATED BY NANONET \n"
ATOM_LINE = "ATOM{}{}  CA  {} H{}{}{}{:.3f}{}{:.3f}{}{:.3f}  1.00 0.00           C\n"
END_LINE = "END"

def create_pdb_from_seq(model, sequence, file_path):
    net_input = utils.generate_input("", False);
    predict_dist, _, _, _ = model.predict(np.asarray([net_input]))
    return predict_dist


def get_rmsd(source_pdb, dest_pdb):
    return 0


def matrix_to_pdb(pdb_file, seq, coord_matrix):
    """
    translates a matrix of Ca x,y,z coordinates to PDB format
    :param pdb_file: pdb file to write to
    :param seq: Nb sequence
    :param coord_matrix: NanoNet output
    :return: None
    """
    pdb_file.write(HEADER)
    seq = utils.pad_seq(seq)
    i = 1
    for aa in range(len(seq)):
        if seq[aa] != "-":
            first_space = (7 - len(str(i))) * " "
            second_space = (4 - len(str(i))) * " "
            third_space = (12 - len("{:.3f}".format(coord_matrix[aa][0]))) * " "
            forth_space = (8 - len("{:.3f}".format(coord_matrix[aa][1]))) * " "
            fifth_space = (8 - len("{:.3f}".format(coord_matrix[aa][2]))) * " "
            if seq[aa] == "X":
                three = "UNK"
            else:
                three = Polypeptide.one_to_three(seq[aa])
            pdb_file.write(ATOM_LINE.format(first_space, i, three, second_space, i, third_space, coord_matrix[aa][0],forth_space, coord_matrix[aa][1],fifth_space, coord_matrix[aa][2]))
            i += 1
    pdb_file.write(END_LINE)

def predict(nanonet, sequence):
    return nanonet.predict(np.array([utils.generate_input(sequence, fasta=False)]))[0]
import random
def rmsd_calc(file1, file2):
    #TODO (amos): Add rmsd function
    return random.random()
    
def present_rmds(orig_pdb_path, list_of_pdbs):
    rmsds = [rmsd_calc(orig_pdb_path, result["file_name"]) for result in list_of_pdbs]
    plt.plot(rmsds)
    plt.show()
def run():
    """
    receives path to a Nb fasta file and a path to a trained neural network and creates a pdb file (Ca only) according to
    the network prediction. the output file name is: "<fasta file name>_nanonet_ca.pdb"
    """
    # parser = argparse.ArgumentParser()
    # parser.add_argument("fasta", help="Nb fasta file")
    # parser.add_argument("network", help="nanonet trained model")

    # args = parser.parse_args()
    
    # nanonet = tf.keras.models.load_model(args.network)
    nanonet = tf.keras.models.load_model('./TrainedNanoNet')
    # nanobody sequence
    file_name = "./SolvedNbs/Nb34/Nb34.fa"
    sequence = utils.get_sequence("./SolvedNbs/Nb34/Nb34.fa")
    # sequence = utils.get_sequence(args.fasta)

    # ca coordinates
    ca_coords = predict(nanonet,sequence)

    # create ca pdb file
    ca_file_name = "output.pdb" #"{}_nanonet_ca.pdb".format(file_name.split(".")[0])
    ca_mutated_file_name = "./outputs/mutated_{}.pdb"
    with open(ca_file_name, "w") as ca_file:
        matrix_to_pdb(ca_file, sequence, ca_coords)
    all_results = []
    for i in range(5):
        data = {}
        data["num_of_mutation"] = seq_mutation.get_num_of_mutation(len(sequence))
        data["mutate_seq"] = seq_mutation.calc_mutate_sequence(sequence, data["num_of_mutation"])
        ca_coords_mutation = predict(nanonet, data["mutate_seq"])
        data["file_name"] = ca_mutated_file_name.format(i) 
        print(data["file_name"])
        with open(data["file_name"], "w") as ca_mutate_file:
            matrix_to_pdb(ca_mutate_file, data["mutate_seq"], ca_coords_mutation)
        all_results.append(data)
    present_rmds(ca_file_name, all_results)